#!/usr/bin/env python

import logging
import sys

from anvil import log as logging
from anvil import shell as sh
from anvil import utils

LOG = logging.getLogger()

def run(*cmd, **kwargs):
    kwargs['run_as_root'] = kwargs.get('run_as_root', True)
    kwargs['stdout_fh'] = kwargs.get('stdout_fh', 1)
    kwargs['stderr_fh'] = kwargs.get('stderr_fh', 2)
    return sh.execute(*cmd, **kwargs)

def run_in_yroot(*cmd, **kwargs):
    quoted_cmd = ["'"]
    quoted_cmd.extend(cmd)
    quoted_cmd.append("'")
    return run('yroot', 'smoke', '--cmd', *quoted_cmd, **kwargs)

def main():
    """
    Do a smoke test by setting up a yroot and running anvil in it.
    """
    logging.setupLogging(logging.AUDIT)
    # reinstall yroot image because it might be screwed
    run('yinst', 'install', 'yroot_image_rhel_6_2_20120514', '-live',
        '-same', '-yes')
    # clean up openstack networking stuff (reboot?)
    # create the yroot
    run('yroot', '--create', 'smoke', '6.2-20120514')
    # we need to be able to run commands in the yroot... make a context for that, or just hop in there and stay for a while?  it won't be able to chroot the current process, is the thing.
    # install git
    run_in_yroot('echo', '$YROOT_NAME')
    # yum update
    # mkdir /home/openstack
    # clone anvil into /home/openstack
    # tweak anvil.ini appropriately
    # run warmup.sh
    # run anvil install with -y (or whatever), -d /home/openstack
    # chmod -R a+rw /home/openstack
    # run anvil start
    # now shell commands should also have context from core.rc and euca.rc
    # run euca-describe-images and check output for sanity
    # run euca-add-keys -k mykey
    # run euca-run-instances -t ami-3 -k mykey
    # run euca-describe-instances and sleep in a loop until the instance is running
    # time out if the instances isn't running after a while
    # grab the IP address from nova list
    # ssh root@instance -k mykey
    # check uptime
    # if everything went OK, delete the yroot
    # run('yroot', '--remove', 'smoke')
    # clean up networking stuff left over
    # run('reboot')
    

if __name__ == '__main__':
    sys.exit(main())
